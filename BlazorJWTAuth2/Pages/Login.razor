@page "/login"

@using BlazorJWTAuth2.Auth;
@using BlazorJWTAuth2.DataAccess;
@using BlazorJWTAuth2.Model;
@using Blazored.LocalStorage;
@using Microsoft.Extensions.Options;
@using Microsoft.IdentityModel.Tokens;
@using System.Text;
@using System.IdentityModel.Tokens.Jwt;
@using System.Security.Claims;

@inject UserAccountService _accountService
@inject ILocalStorageService _localStorage
@inject CustomAuthStateProvider _authState
@inject NavigationManager _navi
@inject IOptions<JwtSettings> _jwtSetting

<AuthorizeView>
    <Authorized>
        <h5>인증된 상태입니다.</h5>
        <p>Hello, @context.User.FindFirst("UserName")?.Value (@context.User.FindFirst("DepartmentText")?.Value)</p>
    </Authorized>
    <NotAuthorized>
        <h5>로그인하세요.</h5>
        <p>아이디는 sa, admin, guest중 아무거나 입력. 비밀번호는 입력하지 않아도 됨.</p>
        <p>이 부분을 수정하려면 Login.razor파일 > AuthenticateUser 함수 내부의 [3]번 항목을 수정하세요.</p>
        <EditForm Model="loginModel" OnValidSubmit="HandleLogin">
            <ChildContent Context="None">
                <InputText @bind-Value="loginModel.Username" placeholder="Username" />
                <InputText @bind-Value="loginModel.Password" type="password" placeholder="Password" />
                <button type="submit">Login</button>
                <p>@ErrMsg</p>
            </ChildContent>
        </EditForm>
    </NotAuthorized>
</AuthorizeView>

@code {
    [CascadingParameter]
    public Task<AuthenticationState> AuthState { get; set; }
    private LoginDto loginModel = new LoginDto();
    private string ErrMsg = "";

    private async Task HandleLogin()
    {
        if (string.IsNullOrWhiteSpace(loginModel.Username) || string.IsNullOrWhiteSpace(loginModel.Password))
        {
            return;
        }

        var token = await AuthenticateUser(loginModel.Username, loginModel.Password);
        if (!string.IsNullOrEmpty(token))
        {
            // 확장 함수를 통해 토큰 암호화 후 localStorage에 저장
            await _localStorage.SaveItemEncryptedAsync<string>("jwt", token);
            _authState.NotifyUserAuthentication(token);
            StateHasChanged();
            _navi.NavigateTo("/", true);
        }
        else
        {
            ErrMsg = "존재하지 않는 ID입니다!";
        }
    }


    private async Task<string> AuthenticateUser(string username, string password)
    {
        await Task.Delay(1);
        var secret = _jwtSetting.Value.SecretKey;
        //[1] 비밀키 선언
        var secretKey = Encoding.ASCII.GetBytes(secret);
        //[2] 비밀키로 서명 생성
        var credentials = new SigningCredentials(new SymmetricSecurityKey(secretKey), SecurityAlgorithms.HmacSha256Signature);
        //[3] 사용자 Id로 Uid 및 정보를 가져온다.
        var user = await _accountService.GetAccountsAsync(username);
        if (user == null)
            return string.Empty;

        //[4] 가져온 현재 사용자 정보를 담는다.
        var claims = new List<Claim>
            {
                new Claim("UserName", user.UserName ),
                new Claim("DepartmentText", user.DepartmentText),
                new Claim("TeamText", user.TeamText),
                new Claim(ClaimTypes.Role, "Member"),
            };
        //[5] 토큰 생성 (claims, 서명정보, 토큰만료기한 포함)
        var token = new JwtSecurityToken(
            claims: claims,
            signingCredentials: credentials,
            expires: DateTime.Now.AddHours(2));

        //[6] Serialize된 토큰 리턴
        var tokenString = new JwtSecurityTokenHandler().WriteToken(token);
        return tokenString;
    }

    public bool ValidateToken(string token)
    {
        var secret = _jwtSetting.Value.SecretKey;
        var tokenHandler = new JwtSecurityTokenHandler();
        var key = Encoding.ASCII.GetBytes(secret);

        var validationParameters = new TokenValidationParameters
        {
            ValidateIssuerSigningKey = true,
            IssuerSigningKey = new SymmetricSecurityKey(key),

            ValidateIssuer = false,
            ValidateAudience = false,

            ValidateLifetime = true,
            ClockSkew = TimeSpan.Zero
        };

        try
        {
            tokenHandler.ValidateToken(token, validationParameters, out SecurityToken validatedToken);

            var jwtToken = validatedToken as JwtSecurityToken;

            if (jwtToken == null)
                return false;

            // Example: Verify if a specific claim is present
            if (!jwtToken.Claims.Any(x => x.Type == "UserName"))
                return false;

            return true;
        }
        catch
        {
            return false;
        }
    }
}
